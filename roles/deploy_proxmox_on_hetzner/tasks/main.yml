---
# tasks file for deploy_proxmox_on_hetzner
- name: Retrieve ISO directory page
  uri:
    url: "{{ base_url }}"
    return_content: yes
  register: webpage
  when: image_url is not defined or image_url == ""

- name: Parse webpage content to find ISO versions
  set_fact:
    iso_version: "{{ webpage.content | regex_findall('proxmox-ve_(\\d+\\.\\d+-\\d)\\.iso') | sort | last }}"
  when: image_url is not defined or image_url == ""

- name: Construct full URL for latest version
  set_fact:
    image_url: "{{ base_url }}proxmox-ve_{{ iso_version }}.iso"
  when: image_url is not defined or image_url == ""

- name: Print ISO URL
  debug:
    var: image_url

- name: Fetch Proxmox VE ISO
  get_url:
    url: "{{ image_url }}"
    dest: "{{ image_path }}"
  register: get_iso
  failed_when: get_iso is failed
  tags:
    - fetch_proxmox_iso

- name: Get list of disks
  shell: |
    lsblk -dn -o NAME,SIZE,TYPE -e 1,7,11,14,15
  register: disk_info
  tags:
    - retrieve_disk_info

- name: Acquire Network Configuration
  block:
    - name: Identify Actual Interface Name
      shell: |
        udevadm info -q property /sys/class/net/eth0 | grep "ID_NET_NAME_PATH=" | cut -d'=' -f2
      register: actual_interface_name

    - name: Extract IP Address & CIDR
      shell: |
        ip addr show eth0 | grep "inet\b" | awk '{print $2}'
      register: ip_cidr

    - name: Determine Default Gateway
      shell: ip route | grep default | awk '{print $3}'
      register: gateway

    - name: Split IP Address, CIDR & Gateway Into Separate Variables
      set_fact:
        ip_address: "{{ ip_cidr.stdout.split('/')[0] }}"
        cidr: "{{ ip_cidr.stdout.split('/')[1] }}"
        gateway: "{{ gateway.stdout }}"
  tags: 
    - acquire_network_config

- name: Generate Network Configuration for Proxmox VM
  vars:
    interface: "{{ actual_interface_name.stdout }}"
  copy:
    content: |
      auto lo
      iface lo inet loopback

      iface {{ interface }} inet manual

      auto vmbr0
      iface vmbr0 inet static
        address {{ ip_address }}/{{ cidr }}
        gateway {{ gateway }}
        bridge_ports {{ interface }}
        bridge_stp off
        bridge_fd 0
    dest: "{{ network_config_local_path }}"
  tags:
    - generate_network_config

- name: Initiate QEMU with CDROM for Proxmox Installation
  block:
    - name: Kick off QEMU for Proxmox Installation (asynchronously)
      shell: |
        qemu-system-x86_64 -daemonize -enable-kvm -m {{ vm_memory }} \
        -hda /dev/{{ disk_info.stdout_lines[0].split(' ')[0] }} \
        -hdb /dev/{{ disk_info.stdout_lines[1].split(' ')[0] }} \
        -cdrom {{ image_path }} -boot d -vnc :0,password -monitor telnet:127.0.0.1:4444,server,nowait

    - name: Set VNC password
      shell: echo "change vnc password {{ vnc_password }}" | nc -q 1 127.0.0.1 4444
  tags:
    - initiate_qemu_with_cdrom

- name: Control QEMU Shutdown After Proxmox Installation
  block:
    - name: Pause for Manual Intervention and Display VNC Connection Details
      pause:
        prompt: |

          To access Proxmox VE installation interface, connect to this machine:
            - via VNC viewer at '{{ ip_address }}:5900' using password '{{ vnc_password }}'
          Complete the Proxmox installation and press ENTER to stop QEMU (Switch to the next task)

    - name: Send QMP Command to Terminate QEMU (SIGTERM)
      shell: |
        printf "quit\n" | nc 127.0.0.1 4444
  tags:
    - control_qemu_shutdown

- name: Configure QEMU Startup Post Proxmox Installation
  block:
    - name: Kick off QEMU Without CDROM After Proxmox Installation (asynchronously)
      shell: |
        qemu-system-x86_64 -daemonize -enable-kvm -m {{ vm_memory }} \
        -hda /dev/{{ disk_info.stdout_lines[0].split(' ')[0] }} \
        -hdb /dev/{{ disk_info.stdout_lines[1].split(' ')[0] }} \
        -vnc :0,password -monitor telnet:127.0.0.1:4444,server,nowait \
        -net user,hostfwd=tcp::{{ proxmox_ssh_port }}-:22 -net nic

    - name: Set VNC password
      shell: echo "change vnc password {{ vnc_password }}" | nc -q 1 127.0.0.1 4444

    - name: Wait for the Proxmox VM to be ready
      pause:
        seconds: 15

    - name: Ensure sshpass is installed
      apt:
        name: sshpass
        state: present

    - name: Transfer Network Configuration file and update nameserver via SSH on Proxmox VM
      shell: |
        sshpass -p "{{ proxmox_password }}" scp -o StrictHostKeyChecking=no -P {{ proxmox_ssh_port }} {{ network_config_local_path }} root@{{ proxmox_host }}:{{ network_config_remote_path }}
        sshpass -p "{{ proxmox_password }}" ssh -o StrictHostKeyChecking=no -p {{ proxmox_ssh_port }} root@{{ proxmox_host }} "sed -i 's/nameserver.*/nameserver {{ nameserver }}/' /etc/resolv.conf"
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
  tags:
    - configure_qemu_startup

- name: Control QEMU Pause, Shutdown & Connection Info
  block:
    - name: Pause for Manual Intervention
      pause:
        prompt: |

          Network Configuration has been successfully transferred to the Proxmox VM.
          If you want to perform some manual configuration, connect to the VM via:
            - VNC at '{{ ip_address }}:5900' using the password '{{ vnc_password }}'
            - SSH at 'root@{{ ip_address }} -p {{ proxmox_ssh_port }}' using the password '{{ proxmox_password }}'
          Press ENTER to shutdown QEMU gracefully

    - name: Send QMP Command to Gracefully Terminate QEMU (ACPI Shutdown)
      shell: |
        printf "system_powerdown\n" | nc 127.0.0.1 4444
  tags:
    - control_qemu_pause

- name: Manage Rescue System Reboot
  block:
    - name: Wait for User to Reboot the Rescue System
      pause:
        prompt: |

          Press ENTER to reboot the Rescue system into Proxmox VE

    - name: Initiate Rescue System Reboot
      shell: sleep 5 && shutdown -r now
      async: 1
      poll: 0
      ignore_errors: true

    - name: Display Proxmox VE Access Information
      debug:
        msg:
          - "Proxmox VE has been successfully installed and should be booting up (in few seconds)."
          - "You can access the Proxmox VE interface at:"
          - "https://{{ ip_address }}:8006"
  tags:
    - manage_rescue_system_reboot
