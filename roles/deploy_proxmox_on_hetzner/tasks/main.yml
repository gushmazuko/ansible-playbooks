---
# tasks file for deploy_proxmox_on_hetzner
- name: Retrieve ISO directory page
  ansible.builtin.uri:
    url: "{{ base_url }}"
    return_content: true
  register: webpage
  when: image_url is not defined or image_url == ""
  tags:
    - fetch_proxmox_iso

- name: Show hostvars
  ansible.builtin.debug:
      var: hostvars[inventory_hostname]
      verbosity: 2

- name: Parse webpage content to find ISO versions
  ansible.builtin.set_fact:
    iso_version: "{{ webpage.content | regex_findall('proxmox-ve_(\\d+\\.\\d+-\\d)\\.iso') | sort | last }}"
  when: image_url is not defined or image_url == ""
  tags:
    - fetch_proxmox_iso

- name: Construct full URL for latest version
  ansible.builtin.set_fact:
    image_url: "{{ base_url }}proxmox-ve_{{ iso_version }}.iso"
  when: image_url is not defined or image_url == ""
  tags:
    - fetch_proxmox_iso

- name: Fetch SHA256SUMS file
  ansible.builtin.uri:
    url: "{{ base_url }}SHA256SUMS"
    return_content: true
  register: sha256sums_file
  when: iso_sha256 is not defined or image_url is not defined or image_url == ""
  tags:
    - fetch_proxmox_iso

- name: Extract SHA256 checksum for the ISO
  ansible.builtin.set_fact:
    iso_sha256: >-
      {{ sha256sums_file.content.splitlines() | select("search", iso_version) | list | first | split(" ") }}
  when:  iso_sha256 is not defined or image_url is not defined or image_url == ""
  tags:
    - fetch_proxmox_iso

- name: Print SHA256 checksum
  ansible.builtin.pause:
    seconds: 1
    prompt: |
      /////////////////
        Download {{ image_url }}
        SHA256SUM {{ iso_sha256[0] }}
      /////////////////
  tags:
    - fetch_proxmox_iso

- name: Fetch Proxmox VE ISO
  ansible.builtin.get_url:
    url: "{{ image_url }}"
    dest: "{{ image_path }}"
    tmp_dest: "/tmp"
    mode: '0644'
    checksum: "sha256:{{ iso_sha256[0]}}"
  register: get_iso
  failed_when: get_iso is failed
  tags:
    - fetch_proxmox_iso

- name: Get list of disks
  ansible.builtin.shell: |
    lsblk -dn -o NAME,SIZE,TYPE -e 1,7,11,14,15
  register: disk_info
  changed_when: false
  tags:
    - retrieve_disk_info

- name: Acquire Network Configuration
  tags:
    - acquire_network_config
  block:
    - name: Identify Actual Interface Name
      ansible.builtin.shell: |
        set -o pipefail
        udevadm info -q property /sys/class/net/eth0 | grep "ID_NET_NAME_PATH=" | cut -d'=' -f2
      args:
        executable: /bin/bash
      register: actual_interface_name
      changed_when: false

    - name: Gather IP Address & CIDR of eth0
      ansible.builtin.shell: |
        set -o pipefail
        ip addr show {{ actual_interface_name }} | grep "inet\b" | awk '{print $2}'
      args:
        executable: /bin/bash
      register: ip_cidr
      changed_when: false

    - name: Determine Default Gateway
      ansible.builtin.shell: |
        set -o pipefail
        ip route | grep default | awk '{print $3}'
      args:
        executable: /bin/bash
      register: gateway
      changed_when: false

    - name: Split IP Address, CIDR & Gateway Into Separate Variables
      ansible.builtin.set_fact:
        ip_cidr: "{{ ip_cidr.stdout }}"
        ip_address: "{{ ip_cidr.stdout.split('/')[0] }}"
        cidr: "{{ ip_cidr.stdout.split('/')[1] }}"
        gateway: "{{ gateway.stdout }}"

- name: Generate Network Configuration for Proxmox VM
  vars:
    interface: "{{ actual_interface_name}}"
  ansible.builtin.template:
    src: network_config.j2
    dest: "{{ network_config_local_path }}"
    mode: '0644'
  tags:
    - generate_network_config

- name: Initiate QEMU with CDROM for Proxmox Installation
  tags:
    - initiate_qemu_with_cdrom
  block:
    - name: Kick off QEMU for Proxmox Installation (asynchronously)
      vars:
        vm_disk1: "{{ disk_info.stdout_lines[1].split(' ')[0] }}"
        vm_disk2: "{{ disk_info.stdout_lines[0].split(' ')[0] }}"
      ansible.builtin.shell: |
        qemu-system-x86_64 -daemonize -enable-kvm -m {{ vm_memory }} \
        -hda /dev/{{ vm_disk1 }} \
        -hdb /dev/{{ vm_disk2 }} \
        -cdrom {{ image_path }} -boot d -vnc :0,password=on -monitor telnet:127.0.0.1:4444,server,nowait
      changed_when: true

    - name: Set VNC password
      ansible.builtin.shell: |
        set -o pipefail
        echo "change vnc password {{ vnc_password }}" | nc -q 1 127.0.0.1 4444
      args:
        executable: /bin/bash
      changed_when: true

- name: Control QEMU Shutdown After Proxmox Installation
  tags:
    - control_qemu_shutdown
  block:
    - name: Pause for Proxmox Installation and Display VNC Connection Details
      ansible.builtin.pause:
        prompt: |

          To access Proxmox VE installation interface, connect to this machine:
            - via VNC viewer at '{{ ip_address }}:5900' using password '{{ vnc_password }}'
          Complete the Proxmox installation and press ENTER to stop QEMU (Switch to the next task)

    - name: Send QMP Command to Terminate QEMU (SIGTERM)
      ansible.builtin.shell: |
        set -o pipefail
        printf "quit\n" | nc 127.0.0.1 4444
      args:
        executable: /bin/bash
      changed_when: false

- name: Configure QEMU Startup Post Proxmox Installation
  tags:
    - configure_qemu_startup
  block:
    - name: Kick off QEMU Without CDROM After Proxmox Installation (asynchronously)
      vars:
        vm_disk1: "{{ disk_info.stdout_lines[1].split(' ')[0] }}"
        vm_disk2: "{{ disk_info.stdout_lines[0].split(' ')[0] }}"
      ansible.builtin.shell: |
        qemu-system-x86_64 -daemonize -enable-kvm -m {{ vm_memory }} \
        -hda /dev/{{ vm_disk1 }} \
        -hdb /dev/{{ vm_disk2 }} \
        -vnc :0,password=on -monitor telnet:127.0.0.1:4444,server,nowait \
        -net user,hostfwd=tcp::{{ proxmox_ssh_port }}-:22 -net nic
      changed_when: true

    - name: Set VNC password
      ansible.builtin.shell: |
        set -o pipefail
        echo "change vnc password {{ vnc_password }}" | nc -q 1 127.0.0.1 4444
      args:
        executable: /bin/bash
      changed_when: true

    - name: Wait for the Proxmox VM to be ready
      ansible.builtin.pause:
        seconds: 15

    - name: Ensure sshpass is installed
      ansible.builtin.package:
        name: sshpass
        state: present

    - name: Transfer Network Configuration file and update nameserver via SSH on Proxmox VM
      ansible.builtin.shell: |
        sshpass -p "{{ proxmox_password }}" scp -o StrictHostKeyChecking=no -P {{ proxmox_ssh_port }} \
        {{ network_config_local_path }} root@{{ proxmox_host }}:{{ network_config_remote_path }}
        sshpass -p "{{ proxmox_password }}" ssh -o StrictHostKeyChecking=no -p {{ proxmox_ssh_port }} \
        root@{{ proxmox_host }} "sed -i 's/nameserver.*/nameserver {{ nameserver }}/' /etc/resolv.conf"
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      changed_when: true

- name: Control QEMU Pause, Shutdown & Connection Info
  tags:
    - control_qemu_pause_shutdown
  block:
    - name: Pause for Manual Intervention
      ansible.builtin.pause:
        prompt: |

          Network Configuration has been successfully transferred to the Proxmox VM.
          If you want to perform some manual configuration, connect to the VM via:
            - VNC at '{{ ip_address }}:5900' using the password '{{ vnc_password }}'
            - SSH at 'root@{{ ip_address }} -p {{ proxmox_ssh_port }}' using the password '{{ proxmox_password }}'
          Press ENTER to shutdown QEMU gracefully
      when: proxmox_pause_for_manual_intervention | default(false)

    - name: Send QMP Command to Gracefully Terminate QEMU (ACPI Shutdown)
      ansible.builtin.shell: |
        set -o pipefail
        printf "system_powerdown\n" | nc 127.0.0.1 4444
      args:
        executable: /bin/bash
      changed_when: true

- name: Manage Rescue System Reboot
  tags:
    - manage_rescue_system_reboot
  block:
    - name: Wait for User to Reboot the Rescue System
      ansible.builtin.pause:
        prompt: |

          Press ENTER to reboot the Rescue system into Proxmox VE
      when: proxmox_pause_for_manual_intervention | default(false)

    - name: Initiate Rescue System Reboot
      ansible.builtin.shell: sleep 5 && shutdown -r now
      async: 1
      poll: 0
      ignore_errors: true
      changed_when: true

    - name: Display Proxmox VE Access Information
      ansible.builtin.debug:
        msg:
          - "Proxmox VE has been successfully installed and should be booting up (in few seconds)."
          - "You can access the Proxmox VE interface at:"
          - "https://{{ ip_address }}:8006"
          - "Copy your SSH public key to the Proxmox VE host:"
          - "ssh-copy-id -o IdentitiesOnly=yes -i ~/.ssh/YOUR_PUBLIC_KEY root@{{ ip_address }}"
