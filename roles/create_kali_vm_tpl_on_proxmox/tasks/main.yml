---
# tasks file for create_kali_vm_tpl_on_proxmox

- name: Get latest Kali version
  ansible.builtin.shell: |
    curl -sL {{ image_url }} | grep -oP 'kali-linux-\K[0-9]+[0-9]+[0-9]+[0-9]+\.[0-9].?(?=-vmware)' | head -1
  register: image_ver
  tags:
    - get_latest

- name: Set latest version to variable
  set_fact:
    image_version: "{{ image_ver.stdout }}"
  tags:
    - get_latest

- name: Download latest Kali image
  ansible.builtin.get_url:
    url: "{{ image_url }}/{{ compressed_image_name }}"
    dest: /tmp/{{ compressed_image_name }}
  tags:
    - download

- name: Decompress donwloaded image
  ansible.builtin.shell: |
    p7zip -d {{ compressed_image_name }}
  args:
    chdir: /tmp/
  tags:
    - decompress_image

- name: Convert image from vmdk to qcow2 format
  ansible.builtin.shell: |
    qemu-img convert -f vmdk {{ vmdk_image_dir }}/{{ vmdk_image_name }} -O qcow2 {{ qcow2_image_name }}
    #rm -rf {{ vmdk_image_dir }}
  args:
    chdir: /tmp/
  tags:
    - convert_image

- name: Create VM
  ansible.builtin.shell: |
    qm create {{ vm_id }} -name {{ vm_template }} -memory {{ vm_memory }} -net0 virtio,bridge={{ network_bridge }} -cores {{ vm_cores }} -sockets {{ vm_sockets }} -cpu cputype=host -kvm 1 -numa {{ numa }} -ostype l26
  tags:
    - create_vm

- name: Mount qcow2 image
  ansible.builtin.shell: |
    mkdir {{ mchrdir }}
    modprobe nbd max_part=8
    qemu-nbd --connect=/dev/nbd0 {{ qcow2_image_name }}
    mount /dev/nbd0p1 {{ mchrdir }}
  args:
    chdir: /tmp/
  tags:
    - mount_image
    - cloud-init

- name: Chroot image & Install Cloud-Init
  ansible.builtin.shell: |
    mount --bind /dev {{ mchrdir }}/dev
    mount --bind /dev/pts {{ mchrdir }}/dev/pts
    mount --bind /proc {{ mchrdir }}/proc
    mount --bind /sys {{ mchrdir }}/sys
    chroot {{ mchrdir }} /bin/bash << EOF
    echo "nameserver 1.1.1.1" | tee /etc/resolv.conf
    echo "deb https://mirrors.ocf.berkeley.edu/kali kali-rolling main contrib non-free" | tee /etc/apt/sources.list
    apt update
    apt install -y cloud-init cloud-initramfs-growroot
    sed -i -e "/    lock_passwd:\ /s/^.*$/    lock_passwd: false/" /etc/cloud/cloud.cfg.d/20_kali.cfg
    sed -i -e "/GRUB_CMDLINE_LINUX=/s/^.*$/GRUB_CMDLINE_LINUX=\"quiet console=tty0 console=ttyS0,115200\"/" /etc/default/grub
    update-grub
    systemctl enable cloud-init
    systemctl enable ssh.service
    EOF
  tags:
    - chroot_image
    - cloud-init

- name: Unmount qcow2 image
  ansible.builtin.shell: |
    umount {{ mchrdir }}/proc
    umount {{ mchrdir }}/dev/pts
    umount {{ mchrdir }}/dev
    umount {{ mchrdir }}/sys
    umount {{ mchrdir }}
    qemu-nbd --disconnect /dev/nbd0
    rmmod nbd
  tags:
    - unmount_image
    - cloud-init

- name: Import Disk to VM
  ansible.builtin.shell: |
    qm importdisk {{ vm_id }} /tmp/{{ qcow2_image_name }} {{ storage }} --format qcow2
    rm -f /tmp/{{ qcow2_image_name }}
  tags:
    - import_disk

- name: Add Disk to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} -scsihw virtio-scsi-single --virtio0 {{ storage }}:vm-{{ vm_id }}-disk-0,discard=on,cache=writeback,iothread=1
  tags:
    - add_disk
  when: storage != "local"

## When `local` storage is used
- name: Add Disk to VM (local storage)
  ansible.builtin.shell: |
    qm set {{ vm_id }} -scsihw virtio-scsi-single --virtio0 {{ storage }}:{{ vm_id }}/vm-{{ vm_id }}-disk-0.qcow2,discard=on,cache=writeback,iothread=1
  tags:
    - add_disk
  when: storage == "local"

- name: Set params to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} -ide2 {{ storage }}:cloudinit
    qm set {{ vm_id }} -serial0 socket
    qm set {{ vm_id }} -boot c -bootdisk virtio0
    qm set {{ vm_id }} -agent 1
    qm set {{ vm_id }} -hotplug disk,network,usb,memory,cpu
    qm set {{ vm_id }} -vga qxl
  tags:
    - set_params

- name: Set VM name
  ansible.builtin.shell: |
    qm set {{ vm_id }} --name {{ vm_template }}
  tags:
    - set_vm_name

# - name: Copy Cloud Init config file to Proxmox
#   ansible.builtin.template:
#     src: ci_config.yaml.j2
#     dest: "/var/lib/vz/snippets/ci_config.yaml"
#     owner: root
#     group: root
#     mode: u=rw,g=r,o=r
#   tags:
#     - ci_config

# - name: Apply Cloud Init config to VM
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --cicustom 'user=local:snippets/ci_config.yaml'
#   tags:
#     - ci_config

# - name: Change default user to sysadmin for CloudInit
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --ciuser={{ default_user }}
#   tags:
#     - change_default_user

# - name: Change password of default user for CloudInit
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --cipassword={{ default_user_password }}
#   tags:
#     - change_default_password

- name: Add Public SSH key to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} --sshkey <(echo '{{ public_ssh_key }}')
  args:
    executable: /bin/bash
  tags:
    - add_sshkey
    - cloud-init

- name: Apply Network Config
  ansible.builtin.shell: |
    qm set {{ vm_id }} --ipconfig0 ip=dhcp
  tags:
    - net_config
    - cloud-init

# - name: Resize VM
#   ansible.builtin.shell: |
#     qm resize {{ vm_id }} virtio0 50G
#   register: vm_size 
#   ignore_errors: true
#   tags:
#     - resize_vm
#     - cloud-init

- name: Create template {{ vm_id }}
  ansible.builtin.shell: |
    qm template {{ vm_id }}
  tags:
    - create_template

- name: Usefull variables
  debug:
    msg:
    - "Technical info of created Template VM:"
    - "ID: {{ vm_id }}"
    - "OS Release: {{ image_version }}"
    - "Template Name: {{ vm_template }}"
  tags:
    - output