---
# tasks file for create_kali_vm_tpl_on_proxmox
- name: Retrieve latest QEMU image URL
  ansible.builtin.uri:
    url: "{{ base_url }}"
    return_content: true
  register: webpage
  when: qemu_image_url is not defined or qemu_image_url == ""
  tags:
    - fetch_qemu_image

- name: Parse webpage content to find latest QEMU image
  ansible.builtin.set_fact:
    qemu_image: "{{ webpage.content | regex_findall('kali-linux-\\d+\\.\\d+-qemu-amd64\\.7z') | sort | last }}"
  when: qemu_image_url is not defined or qemu_image_url == ""
  tags:
    - fetch_qemu_image

- name: Construct full URL for latest QEMU image
  ansible.builtin.set_fact:
    qemu_image_url: "{{ base_url }}{{ qemu_image }}"
  when: qemu_image_url is not defined or qemu_image_url == ""
  tags:
    - fetch_qemu_image

- name: Print QEMU image URL
  ansible.builtin.debug:
    var: qemu_image_url
  tags:
    - fetch_qemu_image

- name: Fetch latest QEMU image
  ansible.builtin.get_url:
    url: "{{ qemu_image_url }}"
    dest: "{{ image_path }}"
    mode: '0644'
  register: get_qemu_image
  failed_when: get_qemu_image is failed
  tags:
    - fetch_qemu_image

- name: Install p7zip package
  ansible.builtin.package:
    name: p7zip-full
    state: present
  tags:
    - decompress_image

- name: Decompress .7z archive
  ansible.builtin.command: "7z x {{ image_path }} -o{{ qcow2_image_directory }}"
  tags:
    - decompress_image_7z

- name: Find extracted .qcow2 file
  ansible.builtin.find:
    paths: "{{ qcow2_image_directory }}"
    patterns: "kali-linux-*.qcow2"
  register: qcow2_files
  tags:
    - decompress_image

- name: Rename extracted files
  ansible.builtin.file:
    src: "{{ item.path }}"
    dest: "{{ qcow2_image_directory }}/{{ qcow2_image_name }}"
    state: link
  loop: "{{ qcow2_files.files }}"
  tags:
    - decompress_image

- name: Remove extracted .7z file
  ansible.builtin.file:
    path: "{{ image_path }}"
    state: absent
  tags:
    - decompress_image

# - name: Create VM
#   ansible.builtin.shell: |
#     qm create {{ vm_id }} -name {{ vm_template }} -memory {{ vm_memory }} -net0 virtio,bridge={{ network_bridge }} -cores {{ vm_cores }} -sockets {{ vm_sockets }} -cpu cputype=host -kvm 1 -numa {{ numa }} -ostype l26
#   tags:
#     - create_vm

- name: Create UEFI VM
  ansible.builtin.shell: |
    qm create {{ vm_id }} \
    --name {{ vm_template }} \
    --memory {{ vm_memory }} \
    --sockets {{ vm_sockets }} \
    --cores {{ vm_cores }} \
    --cpu cputype=host \
    --net0 virtio,bridge={{ network_bridge }} \
    --numa {{ numa }} \
    --ostype l26 \
    --scsihw virtio-scsi-single \
    --bios ovmf \
    --efidisk0 {{ storage }}:0
  tags:
    - create_vm

- name: Import Disk to VM
  ansible.builtin.shell: |
    qm importdisk {{ vm_id }} /tmp/{{ qcow2_image_name }} {{ storage }} --format qcow2
    rm -f /tmp/{{ qcow2_image_name }}
  tags:
    - import_disk

- name: Add Disk to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} --virtio0 {{ storage }}:vm-{{ vm_id }}-disk-1,discard=on,cache=writeback,iothread=1
  tags:
    - add_disk
  when: storage != "local"

## When `local` storage is used
- name: Add Disk to VM (local storage)
  ansible.builtin.shell: |
    qm set {{ vm_id }} --virtio0 {{ storage }}:{{ vm_id }}/vm-{{ vm_id }}-disk-1.qcow2,discard=on,cache=writeback,iothread=1
  tags:
    - add_disk
  when: storage == "local"

- name: Set params to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} --scsi1 {{ storage }}:cloudinit
    qm set {{ vm_id }} --serial0 socket
    qm set {{ vm_id }} --boot c -bootdisk virtio0
    qm set {{ vm_id }} --agent 1
    qm set {{ vm_id }} --hotplug disk,network,usb,memory,cpu
    qm set {{ vm_id }} --vga qxl
  tags:
    - set_params

# - name: Set VM name
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --name {{ vm_template }}
#   tags:
#     - set_vm_name

# - name: Copy Cloud Init config file to Proxmox
#   ansible.builtin.template:
#     src: ci_config.yaml.j2
#     dest: "/var/lib/vz/snippets/ci_config.yaml"
#     owner: root
#     group: root
#     mode: u=rw,g=r,o=r
#   tags:
#     - ci_config

# - name: Apply Cloud Init config to VM
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --cicustom 'user=local:snippets/ci_config.yaml'
#   tags:
#     - ci_config

# - name: Change default user to sysadmin for CloudInit
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --ciuser={{ default_user }}
#   tags:
#     - change_default_user

# - name: Change password of default user for CloudInit
#   ansible.builtin.shell: |
#     qm set {{ vm_id }} --cipassword={{ default_user_password }}
#   tags:
#     - change_default_password

- name: Add Public SSH key to VM
  ansible.builtin.shell: |
    qm set {{ vm_id }} --sshkey <(echo '{{ public_ssh_key }}')
  args:
    executable: /bin/bash
  tags:
    - add_sshkey
    - cloud-init

- name: Apply Network Config
  ansible.builtin.shell: |
    qm set {{ vm_id }} --ipconfig0 ip=dhcp
  tags:
    - net_config
    - cloud-init

# ## When `local-zfs` storage is used
# - name: Resize VM
#   ansible.builtin.shell: |
#     zfs set volsize=50G rpool/data/base-{{ vm_id }}-disk-0
#     sed -i -r '/^virtio0/s/(size=)[^,]*/\150G/' /etc/pve/qemu-server/{{ vm_id }}.conf
#   register: vm_size 
#   ignore_errors: true
#   when: storage == "local-zfs"
#   tags:
#     - resize_vm
#     - cloud-init

# ## When `local` storage is used
# - name: Resize VM
#   ansible.builtin.shell: |
#     qm resize {{ vm_id }} virtio0 50G
#   register: vm_size 
#   ignore_errors: true
#   when: storage == "local"
#   tags:
#     - resize_vm
#     - cloud-init

- name: Create template {{ vm_id }}
  ansible.builtin.shell: |
    qm template {{ vm_id }}
  tags:
    - create_template

- name: Usefull variables
  debug:
    msg:
    - "Technical info of created Template VM:"
    - "ID: {{ vm_id }}"
    - "OS Release: {{ qemu_image_url }}"
    - "Template Name: {{ vm_template }}"
  tags:
    - output